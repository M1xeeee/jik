import random

class Minesweeper:
    def __init__(self, rows, cols, mines):
        self.rows = rows
        self.cols = cols
        self.mines = mines
        self.board = [[' ' for _ in range(cols)] for _ in range(rows)]
        self.mine_positions = set()
        self.revealed = set()
        self.generate_mines()

    def generate_mines(self):
        while len(self.mine_positions) < self.mines:
            r = random.randint(0, self.rows - 1)
            c = random.randint(0, self.cols - 1)
            self.mine_positions.add((r, c))

    def count_adjacent_mines(self, row, col):
        directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
        count = 0
        for dr, dc in directions:
            nr, nc = row + dr, col + dc
            if (nr, nc) in self.mine_positions:
                count += 1
        return count

    def reveal(self, row, col):
        if (row, col) in self.revealed or (row, col) in self.mine_positions:
            return False
        self.revealed.add((row, col))
        adjacent_mines = self.count_adjacent_mines(row, col)
        self.board[row][col] = str(adjacent_mines) if adjacent_mines > 0 else ' '
        if adjacent_mines == 0:
            directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
            for dr, dc in directions:
                nr, nc = row + dr, col + dc
                if 0 <= nr < self.rows and 0 <= nc < self.cols:
                    self.reveal(nr, nc)
        return True

    def display_board(self, reveal_mines=False):
        for r in range(self.rows):
            for c in range(self.cols):
                if (r, c) in self.revealed:
                    print(self.board[r][c], end=' ')
                elif reveal_mines and (r, c) in self.mine_positions:
                    print('*', end=' ')
                else:
                    print('â– ', end=' ')
            print()

    def play(self):
        while True:
            self.display_board()
            try:
                row, col = map(int, input("Enter row and column to reveal (e.g., 0 1): ").split())
                if (row, col) in self.mine_positions:
                    print("Game Over! You hit a mine.")
                    self.display_board(reveal_mines=True)
                    break
                self.reveal(row, col)
                if len(self.revealed) == self.rows * self.cols - self.mines:
                    print("Congratulations! You cleared the board.")
                    self.display_board(reveal_mines=True)
                    break
            except (ValueError, IndexError):
                print("Invalid input. Please enter valid row and column numbers.")

if __name__ == "__main__":
    rows = 5
    cols = 5
    mines = 5
    game = Minesweeper(rows, cols, mines)
    game.play()